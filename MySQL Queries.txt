#1  Which Countries have the most Invoices

SELECT billing_country AS country,
COUNT(total) AS count
FROM invoice
GROUP BY country
ORDER BY count DESC


#2  Who is the senior most employee based on job title?

SELECT employee_id,last_name,first_name 
FROM employee
ORDER BY levels DESC
LIMIT 1


#3  What are top 3 values of total invoice?

SELECT customer_id, total
FROM invoice
ORDER BY total DESC
LIMIT 3


#4  Which city has the best customers? We would like to throw a promotional Music Festival in the city we made the most money. Write a query that returns one city that has the highest sum of invoice totals. Return both the city name & sum of all invoice totals

SELECT billing_city AS city, SUM(total) AS total
FROM invoice
GROUP BY city
ORDER BY total DESC
LIMIT 1


#5. Who is the best customer? The customer who has spent the most money will be 
declared the best customer. Write a query that returns the person who has spent the 
most money

SELECT customer.customer_id,customer.first_name,customer.last_name,
SUM(invoice.total) AS total
FROM customer
JOIN invoice ON invoice.customer_id=customer.customer_id
GROUP BY customer.customer_id
ORDER BY total DESC
LIMIT 1


#6  Write query to return the email, first name, last name, & Genre of all Rock Music listeners. Return your list ordered alphabetically by email starting with A

SELECT distinct customer.customer_id,customer.first_name,
customer.last_name,customer.email 
FROM customer
JOINinvoice on invoice.customer_id = customer.customer_id
JOINinvoice_line on invoice_line.invoice_id = invoice.invoice_id
JOINtrack on track.track_id=invoice_line.track_id
JOINgenre on genre.genre_id=track.genre_id
WHERE genre.name like 'Rock'
ORDER BY customer.email


#7  Let's invite the artists who have written the most rock music in our dataset. Write a query that returns the Artist name and total track COUNT of the top 10 rock bands

SELECT artist.artist_id,artist.name,
COUNT(genre.name) as COUNT 
FROM artist
JOINalbum ON album.artist_id=artist.artist_id
JOINtrack ON track.album_id=album.album_id
JOINgenre ON genre.genre_id=track.genre_id
WHERE genre.name like 'Rock'
GROUP BY artist.artist_id
ORDER BY COUNT DESC


#8  Return all the track names that have a song length longer than the average song length. Return the Name and Milliseconds for each track. ORDER BY the song length with the longest songs listed first

SELECT name,milliseconds
FROM track
WHERE milliseconds>(
	SELECT avg(milliseconds)
	FROM track
)
ORDER BY milliseconds DESC


#9  Find how much amount spent by each customer on artists? Write a query to return customer name, artist name and total spent

WITH best_selling_artist as (
	SELECT artist.artist_id as artist_id,artist.name as artist_name,
	SUM(invoice_line.unit_price*invoice_line.quantity) as total_sales
	FROM invoice_line
	JOINtrack ON track.track_id=invoice_line.track_id
	JOINalbum ON album.album_id=track.album_id
	JOINartist ON artist.artist_id=album.artist_id
	GROUP BY artist.artist_id
	ORDER BY total_sales DESC
	LIMIT 1
)

SELECT customer.customer_id, customer.first_name, customer.last_name, best_selling_artist.artist_name,
SUM(invoice_line.unit_price*invoice_line.quantity) as amount_spent
FROM invoice_line
JOINinvoice ON invoice.invoice_id=invoice_line.invoice_id
JOINcustomer ON customer.customer_id=invoice.customer_id
JOINtrack ON track.track_id=invoice_line.track_id
JOINalbum ON album.album_id=track.album_id
JOINbest_selling_artist ON best_selling_artist.artist_id=album.artist_id
GROUP BY customer.customer_id,customer.first_name,customer.last_name,best_selling_artist.artist_name
ORDER BY amount_spent DESC


#10  We want to find out the most popular music Genre for each country. We determine the most popular genre as the genre with the highest amount of purchases. Write a query that returns each country along with the top Genre. For COUNTries WHERE the maximum number of purchases is shared return all Genres

WITH popular_genre as 
(
    SELECT COUNT(invoice_line.quantity) as purchases, customer.country, genre.name, genre.genre_id, 
	ROW_NUMBER() OVER(PARTITION BY customer.country ORDER BY COUNT(invoice_line.quantity) DESC) as RowNo 
    FROM invoice_line 
	JOINinvoice ON invoice.invoice_id = invoice_line.invoice_id
	JOINcustomer ON customer.customer_id = invoice.customer_id
	JOINtrack ON track.track_id = invoice_line.track_id
	JOINgenre ON genre.genre_id = track.genre_id
	GROUP BY 2,3,4
	ORDER BY 2 asC, 1 DESC
)
SELECT * FROM popular_genre WHERE RowNo <= 1